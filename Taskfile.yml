version: '3'

#  includes:

env:
  DOCKER_REPO: docker-local.home.com
  REPO_USER: admin
  RELEASE_VERSION: 0.1
  CRAWLER_IMAGE: '{{ .DOCKER_REPO }}/crawler:{{ .RELEASE_VERSION }}'

tasks:
  docs:
    desc: generate documents
    cmds:
      # 每次执行都要确保GOPATH正常，且接口变动后，执行swag init
      - echo $GOPATH
      - swag init -g api-server/cmd/server/main.go -o ./docs --parseDependency --parseInternal --parseDepth 3


  # sample: ./bin/task create-api kind=GlobalSettings namespaced=false
  create-api:
    desc: Create a new API using kubebuilder with a variable kind
    cmds:
      - pushd apis && kubebuilder create api --group api --version v1 --kind {{.kind}} --resource=true --controller=false --namespaced={{.namespaced}} --force
      - ./bin/task manifests

  manifests:
    desc: make manifests
    cmds:
      - cd apis && make manifests
      - rm -rf apis/.devcontainer
      - rm -rf apis/.github
      - rm -rf apis/.dockerignore
      - rm -rf apis/.gitignore
      - rm -rf apis/.golangci.yml
      - rm -rf apis/Dockerfile
      - rm -rf apis/README*
      - rm -rf apis/test
      - cp apis/api/v1/groupversion_info.go api-server/pkg/generated/kubeall.io/v1/groupversion_info.go
      - cp apis/api/v1/zz_generated.deepcopy.go api-server/pkg/generated/kubeall.io/v1/deepcopy.go
      - cp apis/api/v1/image_types.go api-server/pkg/generated/kubeall.io/v1/image.go
      - cp apis/api/v1/globalsettings_types.go api-server/pkg/generated/kubeall.io/v1/globalsettings.go

  local_docker: #使用本地的可执行文件编译Docker
    desc: locally build a docker image after code compiled
    cmds:
      - task: build
      - task: docker

  build:
    desc: build a executable file
    deps:
      - clean
    cmds:
      - CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -v -ldflags="-s -w" -o bin/api-server  api-server/cmd/server/main.go

  # this task won't show while desc is not defined
  clean:
    desc: clean unused files
    cmds:
      - rm -f bin/api-server


  docker:
    deps: [ build ]
    cmds:
      - docker build -f docker/Dockerfile_with_bin -t $CRAWLER_IMAGE --rm  .

  push_docker:
    desc: tag the existing docker image and push it into remote repository
    deps: [ docker ]
    cmds:
      #      - docker tag home.com/crawler repo.home.com/crawler:${docker_version}
      #      - docker login $DOCKER_ADDR -u $REPO_USER -p $REPO_PASSWORD
      - docker push $CRAWLER_IMAGE